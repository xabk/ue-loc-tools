---
#
# -------------------------------------------------------------
# ----------------- CROWDIN SETTINGS SECTION ------------------
# -------------------------------------------------------------
#
# Set defaults for Crowdin API integration for all of your projects.
# E.g., if all projects are hosted on your enterprise accounts,
# set `organization` here and you can omit it in crowdin.config.yaml.
#
# crowdin.config.yaml contains the exact same section.
# Any key present in crowdin.yaml overwrites these values.
# For security reasons, api-token can only be set in crowdin.config.yaml.
# Never publish or share your API token or crowdin.config.yaml!
#
crowdin:
  organization: ''
  # Set to your organization name if the project is on enterprise account.
  # Leave this empty, if the project is on crowdin.com.

  # token:      APITOKENYOUGENERATEONCROWDIN
  # You can't set it here, you can only set it in crowdin.config.yaml, which you should keep secret.
  # NEVER SHARE YOUR API TOKEN ANYWHERE!

  project_id: 123456
  # Project ID on Crowdin.

#
# -------------------------------------------------------------
# ----------------- LOCSYNC SETTINGS SECTION ------------------
# -------------------------------------------------------------
#
parameters:
  stop-on-errors: True
  # Should we stop if one task doesn't work?

  use-unreal: True
  # Should we use features that require unreal.py?
  # Requires Unreal Python plugin to be enabled

  p4-checkout: False
  # Should we check out files from p4?
  # By default, it checks out Localization folder.
  # You can also specify additional files for checkout.
  # P4 editor settings are used (from Saved/Config/Windows/SourceControlSettings.ini)

  p4-checkin: False  # TODO: implement this
  # Should we check in the files back to p4?

  p4-cl-desc: |  # TODO: check out the files into a separate CL
    * Imported latest translations from Crowdin
    * Updated language completion rates in the language selection menu
    * Updated community translators in credits
    * Updated the source file on Crowdin
  # Default CL descripiton to use for check-outs and check-ins

# -------------------------------------------------------------
# ----- SCRIPT PARAMETERS: SET DEFAULTS FOR SCRIPTS HERE ------
# -------------------------------------------------------------
script-parameters:

  # Creating source locale (sorted, with debug IDs in context, with comments), 
  # which is also aDebug ID locale, plus creating a Hash locale if needed
  test-lang.py:

    loc_targets: ['Game']
    debug_ID_locale: io  # Set to '' (empty) to disable debug ID locale generation
    hash_locale: ia-001  # Set to '' (empty) to disable hash locale generation
    hash_prefix: '# '
    hash_suffix: ' ~'
    clear_translations: No
    id_length: 4  # Start over (clear_translations = True) if you change id length
    encoding: utf-8-sig
    sort_po: Yes
    var_regex: '{[^}\[<]+}|<[^/>]+/>'  # Looking for {variables} and <empty tags ... />
    comments_criteria:
#     - - PO entry field to search (msgctxt, msgid, msgstr, comment)
#       - RegEx
#       - Comment to add if RegEx is found in the PO entry field
      - - 'msgctxt'  # Example: Hint for abbreviated items, matched by namespace (Satisfactory)
        - 'AbbreviatedDisplayName,'
        - "Abbreviation slot fits 10 i's: iiiiIiiiiI. E.g.,:\niiiiIiiiiI\nSilica (fits)\nСталь (doesn't fit)"
      - - 'msgid'  # Hint for lines with Unreal inline plurals
        - '}\|plural\('
        - |-
          "Please adapt to your language plural rules. We only support keywords: zero, one, two, few, many, other.\n"
          "Use Alt + C on Crowdin to create a skeleton adapted to your language grammar.\n"
          "Translate only white text in curly braces. Test using the form below the Preview box.\n"
          "Check what keywords stand for here: http://www.unicode.org/cldr/charts/29/supplemental/language_plural_rules.html."
      - 
        - 'msgid'  # Example: Hint for lines with 'Zoop' in source (Satisfactory)
        - '\b[Zz]oop'
        - "Please keep this one as is or transliterate/change spelling only. Don't come up with funny names: it brings more harm than good."

    content_dir: '../'

  # Build the translation project on Crowdin, download it, unpack,
  # move to the Unreal Localization directory to make it ready for import
  build-and-download.py:
    loc_targets: ['Game']  # Localization targets, empty = process all targets

    # Relative to Content directory
    zip_name: 'Localization/~Temp/LocFilesTemp.zip'
    temp_dir: 'Localization/~Temp/LocFilesTemp'
    dest_dir: 'Localization/{target}/'

    locales_to_delete: ['en-US-POSIX']

    content_dir: '../'

  # Get top members from Crowdin and update the community credits CSV file,
  # ready to reimport the data table asset in Unreal
  community-credits.py:
    # Relative to Content directory
    csv_name: 'FactoryGame/Interface/UI/DT_Credits_Community.csv'

    csv_encoding: 'utf-16-le'

    translation_threshold: 2000
    review_threshold: 2000

    users_to_exclude: [ ]  # ['logins', 'you', 'want', 'to', 'exclude']

    content_dir: '../'

  # Get completion rates from Crowdin and update the language list CSV file,
  # ready to reimport the data table asset in Unreal
  compl-rate.py:
    loc_targets: ['Game']  # Localization targets, empty = process all targets

    cultures_to_skip: ['en-US-POSIX', 'io']  # Locales to skip (native, debug, etc.)

    # Relative to Content directory
    csv_name: 'Localization/DT_OptionsMenuLanguages.csv'
    
    csv_encoding: 'utf-16-le'

    content_dir: '../'
    
  # Check out Localization directory and any other assets from p4 server
  p4-checkout.py:
    loc_targets: ['Game']  # Localization targets, empty = process all targets

    add_assets_to_checkout: [
      'FactoryGame/Interface/UI/DT_Credits_Community.csv',
      'FactoryGame/Interface/UI/DT_Credits_Community.uasset',
      ]
    
    config_name: '../Saved/Config/Windows/SourceControlSettings.ini'
    p4_config_section: 'PerforceSourceControl.PerforceSourceControlSettings'

    content_dir: '../'

  # Warning: For now this script only supports one config here, not in task lists.
  # Warning: The ue-reimport-assets section is very sensitive to formatting
  # because it's parsed without the yaml module.
  # Add one asset per line like this (Copy Reference in UE):
  # "AssetType'/Game/GameName/Path/To/Asset/Asset_Name.Asset_Name'",
  # don't add any comments and don't change any other lines in this section.
  ue-reimport-assets: # Don't change this line
    assets_to_reimport: [ # Don't change this line, add assets one per line below
      "DataTable'/Game/FactoryGame/Interface/UI/DT_Credits_Community.DT_Credits_Community'",
      "DataTable'/Game/Localization/DT_OptionsMenuLanguages.DT_OptionsMenuLanguages'"
      ] # Don't change this line

  ue-loc-commandlet:
    loc_targets: ['Game']  # Localization targets, empty = process all targets


    # Relative to Game/Content directory
    tasks_to_perform: [ ]
    # Steps to perform. Config/Localization .ini file suffixes:
    # Gather, Export, Import, Сompile, GenerateReports, etc.
    # Specify this in task lists to run specific tasks.
    # E.g., [Gather, Export] or [Import, Compile, GenerateReports]

    try_patch_dependencies: Yes
    # Should we patch dependencies in *_Gather.ini files?
    # This seems to be needed if the project and engine
    # are in completely separate directories

    content_dir: '../'
    # project_dir: ''  # Will try to find it if empty
    # engine_dir: ''  # Will try to find it if empty
    

#
# -------------------------------------------------------------
# ------------------------ TASK LISTS -------------------------
# -------------------------------------------------------------
#
# Task lists are lists of scripts that are executed one after another.
# You can add as many task lists as you like.
# Launch them by running 'locsync.py scenario_name'
# A list of tasks, each task is a few of key-value pairs like this:
#   description: required, this will be printed as the task is performed, and in the summary
#   script: required, relative path to the script file
#   unreal: optional, True/False, flags if this script has to be launched via unreal-cmd.exe
#   p4-checkout/p4-checkin: optional, True/False, flags if the script is checks out assets or checks them in
#   script-parameters: can contain any script specific parameters that will override defaults
# All scripts should also use this config and crowdin.config.yaml for any configuration.

no-source-upload:

#  - description: 'Checkout Localization folder and community credits files'
    # Enable p4-checkout to let this work or check out Localization folder and other assets manually
#    script: p4-checkout.py
#    p4-checkout: True

  - description: 'Gather the text in UE for all targets and export all locales'
    script: ue-loc-gather-commandlet.py
    script-parameters:
      tasks: [Gather, Export]

  - description: 'Generate hash and test/source locale with comments and debug IDs'
    script: test-lang.py
#   script-parameters:
#     hash_locale: '' # Disable hash locale generation

#  - description: 'Pull language completion rates from Crowdin and save them to a CSV file'
#    script: compl_rate.py

#  - description: 'Pull top members from Crowdin, generate date for credits and save it to a CSV file'
#    script: community_credits.py

#  - description: 'Reimport language list and community credits datatables from CSVs'
#    script: ue-reimport-assets.py
#    unreal: True

#  - description: 'Upload the updated source file to Crowdin'
#    script: upload_source.py

  - description: 'Build the project on Crowdin and download all targets to Content/Localization'
    script: build-and-download.py

  - description: 'Import and compile all targets in UE'
    script: ue-loc-gather-commandlet.py
    script-parameters:
      tasks: [Import, Compile, GenerateReports]
  
# end of default

upload-source:
# Upload new source file from test/io locale to Crowdin
  - description: 'Upload the updated source file to Crowdin'
    script: upload_source.py

# end of upload-source

full-sync:
#  - description: 'Checkout Localization folder and community credits files'
#    # Enable p4-checkout to let this work or check out Localization folder and other assets manually
#    script: p4-checkout.py
#    p4-checkout: True

  - description: 'Gather the text in UE for all targets and export the source/test locale draft'
    script: ue-loc-gather-commandlet.py
    script-parameters:
      tasks: [Gather, Export]

  - description: 'Generate test from draft and source locale with comments and debug IDs'
    script: test-lang.py

#  - description: 'Pull language completion rates from Crowdin and save them to a CSV file'
#    script: compl_rate.py

#  - description: 'Pull top members from Crowdin, generate date for credits and save it to a CSV file'
#    script: community_credits.py

#  - description: 'Reimport language list and community credits datatables from CSVs'
#    script: ue-reimport-assets.py
#    unreal: True

  - description: 'Upload the updated source file to Crowdin'
    script: upload-source.py

  - description: 'Build the project on Crowdin and download all targets to Content/Localization'
    script: build-and-download.py

  - description: 'Import and compile all targets in UE'
    script: ue-loc-gather-commandlet.py
    script-parameters:
      tasks: [Import, Compile, GenerateReports]

# end of full-sync

recreate-test-language:
  - description: 'Generate hash and test/source locale with comments and debug IDs'
    script: test-lang.py
    script-parameters:
      hash_locale: '' # Disable hash locale generation
      clear_translations: Yes

# end of recreate-test-language

...