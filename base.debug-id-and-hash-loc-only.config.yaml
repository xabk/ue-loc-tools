---
crowdin:
  organization: ""
  project_id: 123456

# Create cultures in Unreal Editor loc dashboard:
# - Io (io)
# - Interlingua (World) (ia-001)
#
# Feel free to create only one of those and then disable 
# the other in the script settings below:
# - Uncomment `script-parameters:` in local-gather-test-import
# - Uncomment `hash_locale: ""` or `debug_ID_locale: ""` to disable
#     the one you don't need
#
# Change the targets in the task parameters below:
# - loc_targets: ["Game"] → ["Your", "Targets", ...]

#
# -------------------------------------------------------------
# ----------------- LOCSYNC SETTINGS SECTION ------------------
# -------------------------------------------------------------
#
parameters:
  stop-on-errors: True
  # Should we stop if one task crashes or returns an error?

  use-unreal: True
  # Should we launch scripts that require unreal.py?
  # Requires Unreal Python plugin to be enabled
  # Launches scripts via unreal-cmd.exe to leverage the unreal.py

  p4-checkout: True
  # Should we check out files from p4?
  # By default, it checks out the whole Localization folder.
  # You can also specify additional files for checkout in script settings below.
  # UE editor P4 settings are used (Saved/Config/Windows/SourceControlSettings.ini)

  p4-checkin: False # TODO: implement this
  # Should we check in the files back to p4?

  p4-cl-desc:
    | # TODO: check out the files into a separate CL with this description
    * Imported latest translations from Crowdin
    * Updated language completion rates in the language selection menu
    * Updated community translators in credits
    * Updated the source file on Crowdin
  # Default CL descripiton to use for check-outs and check-ins
  
  # engine_dir: "../../" # Relative to project path

# -------------------------------------------------------------
# ----- SCRIPT PARAMETERS: SET DEFAULTS FOR SCRIPTS HERE ------
# -------------------------------------------------------------
script-parameters:
  # Create source locale (sorted, with debug IDs in context, with comments),
  # which also serves as debug ID locale (simple unique debug IDs for all strings).
  # And creating a Hash locale (basic pseudo-localization) if needed.
  test-lang:
    loc_targets: ["Game"]

    hash_locale: ia-001 # Set to '' (empty) to disable hash locale generation\
    hash_not_used_marker: "NOT USED" # If this is in comment, use not_used_prefix
    hash_prefix: "# "
    hash_suffix: " ~"

    debug_ID_locale: io # Set to '' (empty) to disable debug ID locale generation
    clear_translations: No
    debug_prefix: "#" # Start over (clear_translations = True) if you change debug prefix
    id_length: 4 # Start over (clear_translations = True) if you change id length
    encoding: utf-8-sig
    sort_po: Yes
    var_regex: '{[^}\[<]+}|<[^/>]+/>' # Looking for {variables} and <empty tags ... />
    comments_criteria:
      # Ths will add comments based on criteria (e.g., to explain a feature or syntax)
      # Format is as follows:
      #     - - 'field' = PO entry field to search (msgctxt, msgid, msgstr, comment)
      #       - 'RegEx' = regex to use for checking
      #       - |-
      #         "Multiline comment that requires explicit \n for new lines"
      #         "This comment will be added if `RegEx` is found in the PO entry `field`"
      - - "msgid" # Hint for lines with Unreal inline plurals
        - '}\|plural\('
        - |-
          Please adapt to your language plural rules. We only support keywords: 
          zero, one, two, few, many, other.\n
          Use Alt + C on Crowdin to create a skeleton adapted to your language grammar.\n
          Translate only white text in curly braces. Test using the form 
          below the Preview box.\n
          Check what keywords stand for here: 
          http://www.unicode.org/cldr/charts/29/supplemental/language_plural_rules.html.

    delete_comments_criteria: [
        "^Key:.*$", # Delete 'Key: NNN' comments: we have them in msgctxt
        'InfoMetaData:\t".*?" : "\s*"', # Empty InfoMetaData fields
        '^SourceLocation:.*?$', # SourceLocation fields, we have them in occurrences
      ]
    delete_occurrences: No # Delete occurences: we have them in SourceLocation comments

    content_dir: "../"

  # Check out Localization directory and any other assets from p4 server
  p4-checkout:
    loc_targets: ["Game"] # Localization targets, empty = process all targets

    add_assets_to_checkout:
      [
        #
      ]

    config_name: "../Saved/Config/Windows/SourceControlSettings.ini"
    p4_config_section: "PerforceSourceControl.PerforceSourceControlSettings"

    content_dir: "../"

  # Run the Unreal gather text commandlet for any number of loc targets
  # with any number of ini files as parameters
  # Set the defaults here, and specify ini files (steps) in task lists
  ue-loc-gather-cmd:
    loc_targets: ["Game"] # Localization targets, empty = process all targets

    # Relative to Game/Content directory
    tasks_to_perform: []
    # Steps to perform. Config/Localization .ini file suffixes:
    # Gather, Export, Import, Сompile, GenerateReports, etc.
    # Specify this in task lists to run specific tasks.
    # E.g., [Gather, Export] or [Import, Compile, GenerateReports]

    try_patch_dependencies: Yes
    # Should we patch dependencies in *_Gather.ini files?
    # This seems to be needed if the project and engine
    # are in completely separate directories

    log_to_skip: ["LogLinker: "]
    # Logs to skip (to avoid irrelevant spam)

    content_dir: "../"
    # project_dir: ''  # Will try to find it if empty
    # engine_dir: ''  # Will try to find it if empty

  # Run the Unreal gather text commandlet for any number of loc targets
  # with any number of ini files as parameters
  # Set the defaults here, and specify ini files (steps) in task lists
  ue-loc-gather-cmd-2:
    loc_targets: ["Game"] # Localization targets, empty = process all targets

    # Relative to Game/Content directory
    tasks_to_perform: []
    # Steps to perform. Config/Localization .ini file suffixes:
    # Gather, Export, Import, Сompile, GenerateReports, etc.
    # Specify this in task lists to run specific tasks.
    # E.g., [Gather, Export] or [Import, Compile, GenerateReports]

    try_patch_dependencies: Yes
    # Should we patch dependencies in *_Gather.ini files?
    # This seems to be needed if the project and engine
    # are in completely separate directories

    log_to_skip: ["LogLinker: "]
    # Logs to skip (to avoid irrelevant spam)

    content_dir: "../"
    # project_dir: ''  # Will try to find it if empty
    # engine_dir: ''  # Will try to find it if empty

#
# -------------------------------------------------------------
# ------------------------ TASK LISTS -------------------------
# -------------------------------------------------------------
#
# Task lists are lists of scripts to be executed one after another.
# You can add as many task lists as you like.
# Launch them by running 'locsync.py scenario_name'
# A list of tasks, each task is a few of key-value pairs like this:
#   description: required, this will be printed as the task is performed,
#                and in the summary
#   script: 'script_filename', required, relative path to the script file
#   unreal: optional, True/False,
#           flags if this script has to be launched via unreal-cmd.exe
#   p4-checkout/p4-checkin: optional, True/False,
#                           flags if the script is checks out assets or checks them in
#   script-parameters: can contain any script specific parameters
#                      that will override the defaults above
# All scripts use this config and crowdin.config.yaml for configuration.

local-gather-test-import:
  - description: "Checkout Localization folder and community credits files"
    # Enable p4-checkout to let this work or check out Localization folder and other assets manually
    script: p4-checkout
    p4-checkout: True

  - description: "Gather the text in UE for all targets and export the source/test locale draft"
    script: ue-loc-gather-cmd
    script-parameters:
      tasks: [Gather, Export]

  - description: "Generate test from draft and source locale with comments and debug IDs"
    script: test-lang
    # script-parameters:
      # debug_ID_locale: "" # Disable debug ID locale generation
      # hash_locale: "" # Disable hash locale generation

  - description: "Import and compile all targets in UE"
    script: ue-loc-gather-cmd-2
    script-parameters:
      tasks: [Import, Compile, GenerateReports]

# end of local-gather-test-import